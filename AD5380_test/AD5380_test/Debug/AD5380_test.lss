
AD5380_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022a  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015b  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b9  00000000  00000000  0000056d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_MasterInit>:
}

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output; all others input */
	DDRB |= (1<<MOSI)|(1<<SCK);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 62       	ori	r24, 0x28	; 40
  84:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI Mode 1, Master, MSB first, 250 kHz */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<SPR1);
  86:	86 e5       	ldi	r24, 0x56	; 86
  88:	8c bd       	out	0x2c, r24	; 44
  8a:	08 95       	ret

0000008c <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  8c:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <SPI_MasterTransmit+0x2>
		;
  94:	08 95       	ret

00000096 <main>:
void SPI_MasterTransmit(char);

int main(void)
{
	// Setup
	DDRD |= (1<<LDAC);
  96:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1<<SS);
  98:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<SS);
  9a:	2a 9a       	sbi	0x05, 2	; 5
	SPI_MasterInit();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <SPI_MasterInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	87 ea       	ldi	r24, 0xA7	; 167
  a4:	91 e6       	ldi	r25, 0x61	; 97
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x10>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1a>
  b0:	00 00       	nop
	_delay_ms(2000); 
	
	while(1)
	{
		// Write to input buffers
		PORTB &= ~(1<<SS);
  b2:	2a 98       	cbi	0x05, 2	; 5
		SPI_MasterTransmit(packet0);
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_MasterTransmit>
		SPI_MasterTransmit(packet1);
  ba:	80 ee       	ldi	r24, 0xE0	; 224
  bc:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_MasterTransmit>
		SPI_MasterTransmit(packet2);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_MasterTransmit>
		PORTB |= (1<<SS);
  c6:	2a 9a       	sbi	0x05, 2	; 5
		SPI_MasterTransmit(packet7);
		SPI_MasterTransmit(packet8);
		PORTB |= (1<<SS);*/
			
		// Wait for NOT BUSY
		while(!(PORTD & (1<<BUSY)))
  c8:	5e 9b       	sbis	0x0b, 6	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x32>
			;
			
		// Update DAC outputs
		PORTD &= ~(1<<LDAC);
  cc:	5f 98       	cbi	0x0b, 7	; 11
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x42>
  d8:	00 00       	nop
		_delay_ms(1);
		PORTD |= (1<<LDAC);
  da:	5f 9a       	sbi	0x0b, 7	; 11
  dc:	9f ef       	ldi	r25, 0xFF	; 255
  de:	29 e6       	ldi	r18, 0x69	; 105
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	91 50       	subi	r25, 0x01	; 1
  e4:	20 40       	sbci	r18, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x4c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x56>
  ec:	00 00       	nop
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <main+0x1c>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
