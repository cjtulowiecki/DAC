
serialTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000025c  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015d  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d2  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d3  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000cdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  80:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  84:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	80 93 c2 00 	sts	0x00C2, r24
  94:	08 95       	ret

00000096 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	95 ff       	sbrs	r25, 5
  9e:	fd cf       	rjmp	.-6      	; 0x9a <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  a0:	80 93 c6 00 	sts	0x00C6, r24
  a4:	08 95       	ret

000000a6 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 23       	and	r24, r24
  ae:	ec f7       	brge	.-6      	; 0xaa <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
  b0:	80 91 c6 00 	lds	r24, 0x00C6
}
  b4:	08 95       	ret

000000b6 <main>:
void USART_Transmit( unsigned char );
unsigned char USART_Receive( void );
float char2float( unsigned char, unsigned char, unsigned char, unsigned char );

int main(void)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x8>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char data0, data1, data2, data3;
	float data;
	unsigned char dataNew;
	
	USART_Init(MYUBRR);
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
	
    while(1)
    {
		data0 = USART_Receive();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Receive>
  ce:	18 2f       	mov	r17, r24
		data1 = USART_Receive();
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Receive>
  d4:	08 2f       	mov	r16, r24
		data2 = USART_Receive();
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Receive>
  da:	f8 2e       	mov	r15, r24
		data3 = USART_Receive();
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Receive>

float char2float( unsigned char byte0, unsigned char byte1, unsigned char byte2, unsigned char byte3 )
{
	float output;
	
	*((unsigned char*)(&output) + 3 * sizeof(unsigned char)) = byte3;
  e0:	8c 83       	std	Y+4, r24	; 0x04
	*((unsigned char*)(&output) + 2 * sizeof(unsigned char)) = byte2;
  e2:	fb 82       	std	Y+3, r15	; 0x03
	*((unsigned char*)(&output) + 1 * sizeof(unsigned char)) = byte1;
  e4:	0a 83       	std	Y+2, r16	; 0x02
	*((unsigned char*)(&output) + 0 * sizeof(unsigned char)) = byte0;
  e6:	19 83       	std	Y+1, r17	; 0x01
	
	return output;
  e8:	69 81       	ldd	r22, Y+1	; 0x01
  ea:	7a 81       	ldd	r23, Y+2	; 0x02
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	9c 81       	ldd	r25, Y+4	; 0x04
		data1 = USART_Receive();
		data2 = USART_Receive();
		data3 = USART_Receive();
		
		data = char2float(data0, data1, data2, data3);
		dataNew = (unsigned char)(data*2);
  f0:	9b 01       	movw	r18, r22
  f2:	ac 01       	movw	r20, r24
  f4:	0e 94 83 00 	call	0x106	; 0x106 <__addsf3>
  f8:	0e 94 ef 00 	call	0x1de	; 0x1de <__fixunssfsi>
  fc:	86 2f       	mov	r24, r22
		USART_Transmit(dataNew);
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
		
    }
 102:	e3 cf       	rjmp	.-58     	; 0xca <main+0x14>

00000104 <__subsf3>:
 104:	50 58       	subi	r21, 0x80	; 128

00000106 <__addsf3>:
 106:	bb 27       	eor	r27, r27
 108:	aa 27       	eor	r26, r26
 10a:	0e 94 9a 00 	call	0x134	; 0x134 <__addsf3x>
 10e:	0c 94 35 01 	jmp	0x26a	; 0x26a <__fp_round>
 112:	0e 94 27 01 	call	0x24e	; 0x24e <__fp_pscA>
 116:	38 f0       	brcs	.+14     	; 0x126 <__addsf3+0x20>
 118:	0e 94 2e 01 	call	0x25c	; 0x25c <__fp_pscB>
 11c:	20 f0       	brcs	.+8      	; 0x126 <__addsf3+0x20>
 11e:	39 f4       	brne	.+14     	; 0x12e <__addsf3+0x28>
 120:	9f 3f       	cpi	r25, 0xFF	; 255
 122:	19 f4       	brne	.+6      	; 0x12a <__addsf3+0x24>
 124:	26 f4       	brtc	.+8      	; 0x12e <__addsf3+0x28>
 126:	0c 94 24 01 	jmp	0x248	; 0x248 <__fp_nan>
 12a:	0e f4       	brtc	.+2      	; 0x12e <__addsf3+0x28>
 12c:	e0 95       	com	r30
 12e:	e7 fb       	bst	r30, 7
 130:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__fp_inf>

00000134 <__addsf3x>:
 134:	e9 2f       	mov	r30, r25
 136:	0e 94 46 01 	call	0x28c	; 0x28c <__fp_split3>
 13a:	58 f3       	brcs	.-42     	; 0x112 <__addsf3+0xc>
 13c:	ba 17       	cp	r27, r26
 13e:	62 07       	cpc	r22, r18
 140:	73 07       	cpc	r23, r19
 142:	84 07       	cpc	r24, r20
 144:	95 07       	cpc	r25, r21
 146:	20 f0       	brcs	.+8      	; 0x150 <__addsf3x+0x1c>
 148:	79 f4       	brne	.+30     	; 0x168 <__addsf3x+0x34>
 14a:	a6 f5       	brtc	.+104    	; 0x1b4 <__addsf3x+0x80>
 14c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__fp_zero>
 150:	0e f4       	brtc	.+2      	; 0x154 <__addsf3x+0x20>
 152:	e0 95       	com	r30
 154:	0b 2e       	mov	r0, r27
 156:	ba 2f       	mov	r27, r26
 158:	a0 2d       	mov	r26, r0
 15a:	0b 01       	movw	r0, r22
 15c:	b9 01       	movw	r22, r18
 15e:	90 01       	movw	r18, r0
 160:	0c 01       	movw	r0, r24
 162:	ca 01       	movw	r24, r20
 164:	a0 01       	movw	r20, r0
 166:	11 24       	eor	r1, r1
 168:	ff 27       	eor	r31, r31
 16a:	59 1b       	sub	r21, r25
 16c:	99 f0       	breq	.+38     	; 0x194 <__addsf3x+0x60>
 16e:	59 3f       	cpi	r21, 0xF9	; 249
 170:	50 f4       	brcc	.+20     	; 0x186 <__addsf3x+0x52>
 172:	50 3e       	cpi	r21, 0xE0	; 224
 174:	68 f1       	brcs	.+90     	; 0x1d0 <__addsf3x+0x9c>
 176:	1a 16       	cp	r1, r26
 178:	f0 40       	sbci	r31, 0x00	; 0
 17a:	a2 2f       	mov	r26, r18
 17c:	23 2f       	mov	r18, r19
 17e:	34 2f       	mov	r19, r20
 180:	44 27       	eor	r20, r20
 182:	58 5f       	subi	r21, 0xF8	; 248
 184:	f3 cf       	rjmp	.-26     	; 0x16c <__addsf3x+0x38>
 186:	46 95       	lsr	r20
 188:	37 95       	ror	r19
 18a:	27 95       	ror	r18
 18c:	a7 95       	ror	r26
 18e:	f0 40       	sbci	r31, 0x00	; 0
 190:	53 95       	inc	r21
 192:	c9 f7       	brne	.-14     	; 0x186 <__addsf3x+0x52>
 194:	7e f4       	brtc	.+30     	; 0x1b4 <__addsf3x+0x80>
 196:	1f 16       	cp	r1, r31
 198:	ba 0b       	sbc	r27, r26
 19a:	62 0b       	sbc	r22, r18
 19c:	73 0b       	sbc	r23, r19
 19e:	84 0b       	sbc	r24, r20
 1a0:	ba f0       	brmi	.+46     	; 0x1d0 <__addsf3x+0x9c>
 1a2:	91 50       	subi	r25, 0x01	; 1
 1a4:	a1 f0       	breq	.+40     	; 0x1ce <__addsf3x+0x9a>
 1a6:	ff 0f       	add	r31, r31
 1a8:	bb 1f       	adc	r27, r27
 1aa:	66 1f       	adc	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	88 1f       	adc	r24, r24
 1b0:	c2 f7       	brpl	.-16     	; 0x1a2 <__addsf3x+0x6e>
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <__addsf3x+0x9c>
 1b4:	ba 0f       	add	r27, r26
 1b6:	62 1f       	adc	r22, r18
 1b8:	73 1f       	adc	r23, r19
 1ba:	84 1f       	adc	r24, r20
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <__addsf3x+0x9c>
 1be:	87 95       	ror	r24
 1c0:	77 95       	ror	r23
 1c2:	67 95       	ror	r22
 1c4:	b7 95       	ror	r27
 1c6:	f7 95       	ror	r31
 1c8:	9e 3f       	cpi	r25, 0xFE	; 254
 1ca:	08 f0       	brcs	.+2      	; 0x1ce <__addsf3x+0x9a>
 1cc:	b0 cf       	rjmp	.-160    	; 0x12e <__addsf3+0x28>
 1ce:	93 95       	inc	r25
 1d0:	88 0f       	add	r24, r24
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__addsf3x+0xa2>
 1d4:	99 27       	eor	r25, r25
 1d6:	ee 0f       	add	r30, r30
 1d8:	97 95       	ror	r25
 1da:	87 95       	ror	r24
 1dc:	08 95       	ret

000001de <__fixunssfsi>:
 1de:	0e 94 4e 01 	call	0x29c	; 0x29c <__fp_splitA>
 1e2:	88 f0       	brcs	.+34     	; 0x206 <__fixunssfsi+0x28>
 1e4:	9f 57       	subi	r25, 0x7F	; 127
 1e6:	98 f0       	brcs	.+38     	; 0x20e <__fixunssfsi+0x30>
 1e8:	b9 2f       	mov	r27, r25
 1ea:	99 27       	eor	r25, r25
 1ec:	b7 51       	subi	r27, 0x17	; 23
 1ee:	b0 f0       	brcs	.+44     	; 0x21c <__fixunssfsi+0x3e>
 1f0:	e1 f0       	breq	.+56     	; 0x22a <__fixunssfsi+0x4c>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	1a f0       	brmi	.+6      	; 0x202 <__fixunssfsi+0x24>
 1fc:	ba 95       	dec	r27
 1fe:	c9 f7       	brne	.-14     	; 0x1f2 <__fixunssfsi+0x14>
 200:	14 c0       	rjmp	.+40     	; 0x22a <__fixunssfsi+0x4c>
 202:	b1 30       	cpi	r27, 0x01	; 1
 204:	91 f0       	breq	.+36     	; 0x22a <__fixunssfsi+0x4c>
 206:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fp_zero>
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	08 95       	ret
 20e:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__fp_zero>
 212:	67 2f       	mov	r22, r23
 214:	78 2f       	mov	r23, r24
 216:	88 27       	eor	r24, r24
 218:	b8 5f       	subi	r27, 0xF8	; 248
 21a:	39 f0       	breq	.+14     	; 0x22a <__fixunssfsi+0x4c>
 21c:	b9 3f       	cpi	r27, 0xF9	; 249
 21e:	cc f3       	brlt	.-14     	; 0x212 <__fixunssfsi+0x34>
 220:	86 95       	lsr	r24
 222:	77 95       	ror	r23
 224:	67 95       	ror	r22
 226:	b3 95       	inc	r27
 228:	d9 f7       	brne	.-10     	; 0x220 <__fixunssfsi+0x42>
 22a:	3e f4       	brtc	.+14     	; 0x23a <__fixunssfsi+0x5c>
 22c:	90 95       	com	r25
 22e:	80 95       	com	r24
 230:	70 95       	com	r23
 232:	61 95       	neg	r22
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	8f 4f       	sbci	r24, 0xFF	; 255
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	08 95       	ret

0000023c <__fp_inf>:
 23c:	97 f9       	bld	r25, 7
 23e:	9f 67       	ori	r25, 0x7F	; 127
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	08 95       	ret

00000248 <__fp_nan>:
 248:	9f ef       	ldi	r25, 0xFF	; 255
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	08 95       	ret

0000024e <__fp_pscA>:
 24e:	00 24       	eor	r0, r0
 250:	0a 94       	dec	r0
 252:	16 16       	cp	r1, r22
 254:	17 06       	cpc	r1, r23
 256:	18 06       	cpc	r1, r24
 258:	09 06       	cpc	r0, r25
 25a:	08 95       	ret

0000025c <__fp_pscB>:
 25c:	00 24       	eor	r0, r0
 25e:	0a 94       	dec	r0
 260:	12 16       	cp	r1, r18
 262:	13 06       	cpc	r1, r19
 264:	14 06       	cpc	r1, r20
 266:	05 06       	cpc	r0, r21
 268:	08 95       	ret

0000026a <__fp_round>:
 26a:	09 2e       	mov	r0, r25
 26c:	03 94       	inc	r0
 26e:	00 0c       	add	r0, r0
 270:	11 f4       	brne	.+4      	; 0x276 <__fp_round+0xc>
 272:	88 23       	and	r24, r24
 274:	52 f0       	brmi	.+20     	; 0x28a <__fp_round+0x20>
 276:	bb 0f       	add	r27, r27
 278:	40 f4       	brcc	.+16     	; 0x28a <__fp_round+0x20>
 27a:	bf 2b       	or	r27, r31
 27c:	11 f4       	brne	.+4      	; 0x282 <__fp_round+0x18>
 27e:	60 ff       	sbrs	r22, 0
 280:	04 c0       	rjmp	.+8      	; 0x28a <__fp_round+0x20>
 282:	6f 5f       	subi	r22, 0xFF	; 255
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	08 95       	ret

0000028c <__fp_split3>:
 28c:	57 fd       	sbrc	r21, 7
 28e:	90 58       	subi	r25, 0x80	; 128
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	59 f0       	breq	.+22     	; 0x2ac <__fp_splitA+0x10>
 296:	5f 3f       	cpi	r21, 0xFF	; 255
 298:	71 f0       	breq	.+28     	; 0x2b6 <__fp_splitA+0x1a>
 29a:	47 95       	ror	r20

0000029c <__fp_splitA>:
 29c:	88 0f       	add	r24, r24
 29e:	97 fb       	bst	r25, 7
 2a0:	99 1f       	adc	r25, r25
 2a2:	61 f0       	breq	.+24     	; 0x2bc <__fp_splitA+0x20>
 2a4:	9f 3f       	cpi	r25, 0xFF	; 255
 2a6:	79 f0       	breq	.+30     	; 0x2c6 <__fp_splitA+0x2a>
 2a8:	87 95       	ror	r24
 2aa:	08 95       	ret
 2ac:	12 16       	cp	r1, r18
 2ae:	13 06       	cpc	r1, r19
 2b0:	14 06       	cpc	r1, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	f2 cf       	rjmp	.-28     	; 0x29a <__fp_split3+0xe>
 2b6:	46 95       	lsr	r20
 2b8:	f1 df       	rcall	.-30     	; 0x29c <__fp_splitA>
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <__fp_splitA+0x30>
 2bc:	16 16       	cp	r1, r22
 2be:	17 06       	cpc	r1, r23
 2c0:	18 06       	cpc	r1, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	f1 cf       	rjmp	.-30     	; 0x2a8 <__fp_splitA+0xc>
 2c6:	86 95       	lsr	r24
 2c8:	71 05       	cpc	r23, r1
 2ca:	61 05       	cpc	r22, r1
 2cc:	08 94       	sec
 2ce:	08 95       	ret

000002d0 <__fp_zero>:
 2d0:	e8 94       	clt

000002d2 <__fp_szero>:
 2d2:	bb 27       	eor	r27, r27
 2d4:	66 27       	eor	r22, r22
 2d6:	77 27       	eor	r23, r23
 2d8:	cb 01       	movw	r24, r22
 2da:	97 f9       	bld	r25, 7
 2dc:	08 95       	ret

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
